<A general summary>

User interface:
Many new views has been added to simplify data entry, project execution and analyzes, like:
* Introduction that includes a small tutorial to get you started.
* Separate tree view based editors for editing tasks, resources and cost structures.
* Graphical- and list based task dependency editors.
* Task status views for inspecting and modifying task progress.
* Schedules view to handle scheduling. It supports critical path and PERT analyzes.

Views are listed in a configurable view selector docker. Most views are also configurable,
making it possible to tailor the ui to the users particular needs.

Earned value management:
KPlato can now calculate and display performance indexes, BCWS, BCWP, and ACWP
for the whole project or for individual tasks or group of tasks.

Scheduling:
User can select if resource overbooking should be allowed or avoided.
PERT distribution based on optimistic-, pessimistic- and most likely estimates.
It is possible to re-schedule the project from  a specified time based on the
current performance, to cater for changes like additional tasks or resource availability changes.

Scripting:
Scripting is provided via the common KOffice scripting interface.
Scripts are provided that can:
* Import resources from a KPlato file.
* Export and import resource assignments.
This makes it possible to coordinate resource usage between projects.


Work flow support:
It is possible to issue "work packages" from KPlato to the resources in the project.
A work package is task information issued to a particular resource. The resource
can then use KPlatoWork to access the task information, and report status/progress back to the project.
KPlatoWork is similar to a pim todo view and handles all (KPlato) tasks the resource is assigned to.

Export filter:
Export to icalendar format makes it possible to handle tasks as todos in pim applications.
