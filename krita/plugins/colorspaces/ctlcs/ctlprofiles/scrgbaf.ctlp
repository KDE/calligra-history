<ctlprofile>
    <info colorModel="RGBA" type="float" name="Standard Linear RGB (scRGB/sRGB64)" />
    <program>
<![CDATA[

import "pigmentutils";

const float gamma = 2.4;

// Implement color transformation as defined by http://www.colour.org/tc8-05/Docs/colorspace/61966-2-2NPa.pdf


float gammaToLinearFloat( float v)
{
  if (v < 0.03928) return v / 12.92;
  return pow ((v + 0.055) / 1.055, gamma);
}


void RGBAu16_to_scRGBAf(int rIn, int gIn, int bIn, int aIn, output float rOut, output float gOut, output float bOut, output float aOut, float exposure = 1.0)
{
    rOut = gammaToLinearFloat( int16toFloat( rIn ) ) / exposure;
    gOut = gammaToLinearFloat( int16toFloat( gIn ) ) / exposure;
    bOut = gammaToLinearFloat( int16toFloat( bIn ) ) / exposure;
    aOut = int16toFloat( aIn );
}

void sRGBAf_to_scRGBAf(float rIn, float gIn, float bIn, float aIn, output float rOut, output float gOut, output float bOut, output float aOut, float exposure = 1.0)
{
    rOut = gammaToLinearFloat( rIn ) / exposure;
    gOut = gammaToLinearFloat( gIn ) / exposure;
    bOut = gammaToLinearFloat( bIn ) / exposure;
    aOut = aIn;
}

float linearFloatToGamma( float v)
{
    if( v < 0.00304 ) return 12.92 * v;
    else return 1.055 * pow (v, (1.0/gamma)) - 0.055;
}

void scRGBAf_to_RGBAu16(float rIn, float gIn, float bIn, float aIn, output int rOut, output int gOut, output int bOut, output int aOut, float exposure = 1.0)
{
    rOut = floatToInt16( linearFloatToGamma( rIn * exposure ) );
    gOut = floatToInt16( linearFloatToGamma( gIn * exposure ) );
    bOut = floatToInt16( linearFloatToGamma( bIn * exposure ) );
    aOut = floatToInt16( aIn );
}

void scRGBAf_to_sRGBAf(float rIn, float gIn, float bIn, float aIn, output float rOut, output float gOut, output float bOut, output float aOut, float exposure = 1.0)
{
    rOut = linearFloatToGamma( rIn * exposure );
    gOut = linearFloatToGamma( gIn * exposure );
    bOut = linearFloatToGamma( bIn * exposure );
    aOut = aIn;
}


]]>
    </program>
    <transformations>
        <conversions>
            <conversion function="RGBAu16_to_scRGBAf">
                <input colorModel="RGBA" depth="16" type="integer" profile="sRGB built-in - (lcms internal)" />
                <output colorModel="RGBA" type="float" />
            </conversion>
            <conversion function="scRGBAf_to_RGBAu16">
                <input colorModel="RGBA" type="float" />
                <output colorModel="RGBA" depth="16" type="integer" profile="sRGB built-in - (lcms internal)" />
            </conversion>
            <conversion function="sRGBAf_to_scRGBAf">
                <input colorModel="RGBA" type="float" profile="Standard RGB (sRGB)" />
                <output colorModel="RGBA" type="float" profile="Standard Linear RGB (scRGB/sRGB64)" />
            </conversion>
            <conversion function="scRGBAf_to_sRGBAf">
                <input colorModel="RGBA" type="float" profile="Standard Linear RGB (scRGB/sRGB64)" />
                <output colorModel="RGBA" type="float" profile="Standard RGB (sRGB)" />
            </conversion>
        </conversions>
    </transformations>
</ctlprofile>
