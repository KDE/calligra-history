<
  parameters: <
    colors: <
      colorrgb: <
        label: "Object";
        type: color;
        defaultValue: { 0.2, 0.01, 0.08 };
      >;
      colorcenterrgb: <
        label: "Background";
        type: color;
        defaultValue: { 1.0, 1.0, 1.0 };
      >;
    >;
    xcenter: <
      label: "Center x";
      type: float;
    >;
    ycenter: <
      label: "Center y";
      type: float;
    >;
    phase: <
      label: "Phase";
      type: float;
      defaultValue: 6.0;
      maxValue: 32.0;
    >;
    radiusp: <
      label: "Radius";
      type: float;
      defaultValue: 0.8;
    >;
  >;
>;
kernel Something
{
  const float2 center = { IMAGE_WIDTH * xcenter, IMAGE_HEIGHT * ycenter };
  const float PI = 3.14159265;
  const float4 color1 = { colorrgb[0], colorrgb[1], colorrgb[2], 1.0 };
  const float4 colorCenter = { colorcenterrgb[0], colorcenterrgb[1], colorcenterrgb[2], 1.0 };
  const float radius = 0.2 * (IMAGE_WIDTH + IMAGE_HEIGHT) * radiusp;
  
  void evaluatePixel(out pixel4 result)
  {
    float2 vec = result.coord - center;
    float vec_length = length( vec );
    float angle = atan2( vec.x, vec.y);
    float coef = (cos( angle * phase) + cos( angle * 0.5 * phase ) + cos( angle * 0.1 * phase ) + cos( angle * 0.01 * phase )) * 0.25;
//      float coef = (cos( angle * phase) * cos( angle * 0.5 * phase ) * cos( angle * 0.1 * phase ) * cos( angle * 0.01 * phase ));
   if( coef < 0.0 ) coef = - coef;
    coef = 1.0 - coef;
    float adjRadius = radius  * ( 0.5 + 1.0 * coef );
    if( vec_length < adjRadius )
    {
      if( vec_length < adjRadius )
      {
	coef = pow((radius - vec_length) / adjRadius , 1.0 ) * ( 1.0 - coef) + coef;
      }
      result = ( 1 - coef ) * color1 + coef * colorCenter;
      
      for( int i = 0; i < 3; ++i)
      {
	if(result[i] < 0) result[i] = 0.0;
	else if(result[i] > 1) result[i] = 1.0;
      }
      result[3] = 1.0;
    } else {
      result = colorCenter;
    }
  }
  region generated()
  {
    region reg = { 0, 0, IMAGE_WIDTH, IMAGE_HEIGHT};
    return reg;
  }
}
